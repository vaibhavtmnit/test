import chainlit as cl
import json

@cl.on_chat_start
async def start():
    # Load the hierarchical data from the JSON file.
    with open('tree.json', 'r') as f:
        data = json.load(f)

    # Send the custom element with the data.
    # Note: Interactivity is handled entirely client-side in this D3 example,
    # so no action callbacks are needed.
    elements=[
            cl.CustomElement(
                name="TreeChart", 
                props={"data": data},
                display='page'
            )
        ]
    await cl.Message(
        content="Here is a collapsible tree chart. Click TreeChart the nodes to expand or collapse them.",
        elements = elements
        
    ).send()




import React, { useEffect, useRef } from 'react';
import { Card } from "@/components/ui/card";

const D3_CDN_URL = "https://d3js.org/d3.v7.min.js";

export default function TreeChart() {
    // A ref to the container div where the chart will be mounted.
    const chartContainerRef = useRef(null);
    // A ref to prevent adding the D3 script tag more than once.
    const isD3Loaded = useRef(false);

    useEffect(() => {
        if (!props.data) {
            return; // Don't render if there's no data
        }

        // This is the main function that contains your D3 chart logic.
        const renderChart = () => {
            const container = chartContainerRef.current;
            if (!container || !window.d3) return;

            // Clear the container before drawing a new chart
            container.innerHTML = ''; 

            // --- START of your D3 code ---
            const data = props.data;
            const d3 = window.d3;
            
            const width = 928;
            const marginTop = 10;
            const marginRight = 10;
            const marginBottom = 10;
            const marginLeft = 40;

            const root = d3.hierarchy(data);
            const dx = 10;
            const dy = (width - marginRight - marginLeft) / (1 + root.height);

            const tree = d3.tree().nodeSize([dx, dy]);
            const diagonal = d3.linkHorizontal().x(d => d.y).y(d => d.x);

            const svg = d3.create("svg")
                .attr("width", width)
                .attr("height", dx)
                .attr("viewBox", [-marginLeft, -marginTop, width, dx])
                .attr("style", "max-width: 100%; height: auto; font: 10px sans-serif; user-select: none;");

            const gLink = svg.append("g")
                .attr("fill", "none")
                .attr("stroke", "#555")
                .attr("stroke-opacity", 0.4)
                .attr("stroke-width", 1.5);

            const gNode = svg.append("g")
                .attr("cursor", "pointer")
                .attr("pointer-events", "all");

            function update(event, source) {
                const duration = event?.altKey ? 2500 : 250;
                const nodes = root.descendants().reverse();
                const links = root.links();

                tree(root);

                let left = root;
                let right = root;
                root.eachBefore(node => {
                    if (node.x < left.x) left = node;
                    if (node.x > right.x) right = node;
                });

                const height = right.x - left.x + marginTop + marginBottom;

                const transition = svg.transition()
                    .duration(duration)
                    .attr("height", height)
                    .attr("viewBox", [-marginLeft, left.x - marginTop, width, height])
                    .tween("resize", window.ResizeObserver ? null : () => () => svg.dispatch("toggle"));

                const node = gNode.selectAll("g")
                    .data(nodes, d => d.id);

                const nodeEnter = node.enter().append("g")
                    .attr("transform", d => `translate(${source.y0},${source.x0})`)
                    .attr("fill-opacity", 0)
                    .attr("stroke-opacity", 0)
                    .on("click", (event, d) => {
                        d.children = d.children ? null : d._children;
                        update(event, d);
                    });

                nodeEnter.append("circle")
                    .attr("r", 2.5)
                    .attr("fill", d => d._children ? "#555" : "#999")
                    .attr("stroke-width", 10);

                nodeEnter.append("text")
                    .attr("dy", "0.31em")
                    .attr("x", d => d._children ? -6 : 6)
                    .attr("text-anchor", d => d._children ? "end" : "start")
                    .text(d => d.data.name)
                    .attr("stroke-linejoin", "round")
                    .attr("stroke-width", 3)
                    .attr("stroke", "white")
                    .attr("paint-order", "stroke");

                node.merge(nodeEnter).transition(transition)
                    .attr("transform", d => `translate(${d.y},${d.x})`)
                    .attr("fill-opacity", 1)
                    .attr("stroke-opacity", 1);

                node.exit().transition(transition).remove()
                    .attr("transform", d => `translate(${source.y},${source.x})`)
                    .attr("fill-opacity", 0)
                    .attr("stroke-opacity", 0);

                const link = gLink.selectAll("path")
                    .data(links, d => d.target.id);

                const linkEnter = link.enter().append("path")
                    .attr("d", d => {
                        const o = { x: source.x0, y: source.y0 };
                        return diagonal({ source: o, target: o });
                    });

                link.merge(linkEnter).transition(transition)
                    .attr("d", diagonal);

                link.exit().transition(transition).remove()
                    .attr("d", d => {
                        const o = { x: source.x, y: source.y };
                        return diagonal({ source: o, target: o });
                    });

                root.eachBefore(d => {
                    d.x0 = d.x;
                    d.y0 = d.y;
                });
            }

            root.x0 = dy / 2;
            root.y0 = 0;
            root.descendants().forEach((d, i) => {
                d.id = i;
                d._children = d.children;
                if (d.depth && d.data.name.length !== 7) d.children = null;
            });

            update(null, root);
            
            // --- END of your D3 code ---

            // **Crucial Change:** Instead of returning svg.node(), append it to the container.
            container.appendChild(svg.node());
        };
        
        // Load the D3 script if it hasn't been loaded yet.
        if (!isD3Loaded.current) {
            const script = document.createElement('script');
            script.src = D3_CDN_URL;
            script.async = true;
            script.onload = () => {
                isD3Loaded.current = true;
                renderChart(); // Render the chart once the script is loaded.
            };
            document.body.appendChild(script);
        } else {
            // If D3 is already loaded, just render the chart.
            renderChart();
        }

    }, [props.data]); // Re-run this effect if the data prop changes.

    return (
        <Card>
            <div ref={chartContainerRef} className="w-full p-4 overflow-auto"></div>
        </Card>
    );
}



{
    "name": "Root",
    "children": [
      {
        "name": "Branch 1",
        "children": [
          { "name": "Leaf 1.1" },
          { "name": "Leaf 1.2" },
          {
            "name": "Branch 1.3",
            "children": [
              { "name": "Leaf 1.3.1" },
              { "name": "Leaf 1.3.2" }
            ]
          }
        ]
      },
      {
        "name": "Branch 2",
        "children": [
          { "name": "Leaf 2.1" }
        ]
      },
      {
        "name": "Branch 3"
      }
    ]
  }



